<?php

/**
 * Implements hook_menu().
 */
function upitt_dashboard_menu() {
  $items = array(
    'admin/islandora/tools/upitt_dashboard' => array(
      'title' => 'University of Pittsburgh Admin Dashboard',
      'description' => 'Configure options related to the Admin Dashboard.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_dashboard_admin_form'),
      'access arguments' => array('access dashboard'),
      'file' => 'includes/admin.form.inc',
    ),
  );

  return $items;
}

function _get_reports_variable_get() {
  return unserialize(variable_get('upitt_dashboard_block_bids', ''));
}

/**
 * Implements hook_block_info().
 */
function upitt_dashboard_block_info() {
  $active_reports = _get_reports_variable_get();
  $blocks = array(
    'test1' => array(
      'info' => t('Dashboard report TEST Block'),
      'status' => array_key_exists('test1', $active_reports) ? 1 : 0,
      'region' => 'dashboard_inactive',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'test2' => array(
      'info' => t('Dashboard report 2 TEST Block'),
      'status' => array_key_exists('test2', $active_reports) ? 1 : 0,
      'region' => 'dashboard_inactive',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function upitt_dashboard_block_view($delta = '') {
  global $theme_key;
  if ($delta == "*uninitialized*") { exit; }
  $reports = _get_reports_variable_get();
  $blocks = _block_rehash();
  if (array_key_exists($delta, $reports)) {
    $fn = 'upitt_dashboard_' . $delta . '_content';
    @list($subject, $content) = (function_exists($fn)) ? $fn() : 
      array('Subject not set {' . $delta . '}',
          'Content creation function "' . $fn . '{}" does not exist for block "' . $delta . '".');
    $block['subject'] = $subject;
    $block['content'] = $content;
    return $block;
  }
}

function upitt_dashboard_block_view_alter(&$data, $block) {
//   dpm($data);
//   dpm($block);
}

function upitt_dashboard_test1_content() {
  $subject = 'Orphan page report';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $query_processor->solrQuery = '(PID:pitt\:*) AND -RELS_EXT_isPageOf_uri_s:["" TO *] AND RELS_EXT_hasModel_uri_s:(*info\:fedora\/islandora\:pageCModel*)';
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 1000;
  $query_processor->solrParams = array(
    'fl' => "PID,fedora_datastreams_ms,isMemberOfSite,fgs_label_s,RELS_EXT_isMemberOfSite_uri_ms",
    'fq' => "",
  );
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $results = array();
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    if ($tmp['response']['numFound'] > 0) {
      $results = array();
      foreach ($tmp['response']['docs'] as $trip) {
        $results[]['object']['value'] = $trip['PID'];
      }
    }
    else {
      $results[] = 'No matching records found.';
    }
  }
  catch (Exception $e) {
  }
  $content = implode("\n", $results);
  return array($subject, $content);
}

function upitt_dashboard_test2_content() {
  $subject = 'WebServices needs to add TN_LARGE';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $query_processor->solrQuery = '(PID:pitt\:*) AND (RELS_EXT_hasModel_uri_s:info\:fedora\/islandora\:bookCModel)';
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 1000;
  $query_processor->solrParams = array(
    'fl' => "PID,fedora_datastreams_ms,isMemberOfSite,fgs_label_s,RELS_EXT_isMemberOfSite_uri_ms",
    'fq' => "-fedora_datastream_latest_TN_LARGE_ID_ms:[* TO *]",
  );
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $results = array();
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    if ($tmp['response']['numFound'] > 0) {
      $results = array();
      foreach ($tmp['response']['docs'] as $trip) {
        $results[]['object']['value'] = $trip['PID'];
      }
    }
    else {
      $results[] = 'No matching records found.';
    }
  }
  catch (Exception $e) {
  }
  $content = implode("\n", $results);
  return array($subject, $content);
}