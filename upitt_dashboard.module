<?php

/**
 * Implements hook_menu().
 */
function upitt_dashboard_menu() {
  $items = array(
    'admin/islandora/tools/upitt_dashboard' => array(
      'title' => 'University of Pittsburgh Admin Dashboard',
      'description' => 'Configure options related to the Admin Dashboard.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_dashboard_admin_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
    ),
    'upitt_dashboard/report_block/%/downloadcsv' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_dashboard_downloadcsv', 2),
      'access arguments' => array('administer site configuration'),
    ),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function upitt_dashboard_block_info() {
  $blocks = array(
    'test1' => array(
      'info' => t('Dashboard - Orphan Page (BookCModel) report'),
      'status' => 1,
      'region' => 'dashboard_inactive',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'test2' => array(
      'info' => t('Dashboard - WebServices needs to add TN_LARGE'),
      'status' => 1,
      'region' => 'dashboard_inactive',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'orphanManuscript' => array(
      'info' => t('Dashboard - Orphan manuscript ("Book")'),
      'status' => 1,
      'region' => 'dashboard_inactive',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function upitt_dashboard_block_view($delta = '') {
  global $theme_key;
  if ($delta == "*uninitialized*") { exit; }
  $fn = 'upitt_dashboard_' . $delta . '_content';
  @list($subject, $content) = (function_exists($fn)) ? $fn(FALSE) :
    array('Subject not set {' . $delta . '}',
          'Content creation function "' . $fn . '{}" does not exist for block "' . $delta . '".');
  $block['subject'] = $subject;
  $block['content'] = $content;
  return $block;
}

function upitt_dashboard_test1_content($csv = FALSE, $start = 0) {
  $subject = 'Orphan Page (BookCModel) report';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $q = '(PID:pitt\:*) AND -RELS_EXT_isPageOf_uri_s:["" TO *] AND RELS_EXT_hasModel_uri_s:(*info\:fedora\/islandora\:pageCModel*)';
  $fq = "";
  $fl = "PID,fedora_datastreams_ms,isMemberOfSite,fgs_label_s,RELS_EXT_isMemberOfSite_uri_ms";
  $query_processor->solrQuery = $q;
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 1000;
  $query_processor->solrParams = array(
    'fl' => $fl,
    'fq' => $fq,
  );
  $headings = array('PID' => 'PID',
                    'fgs_label_s' => 'Fedora Label',
                    'RELS_EXT_isMemberOfSite_uri_ms' => 'Member of Sites',
                    'fedora_datastreams_ms' => 'Datastreams');
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $results = array();
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    if ($tmp['response']['numFound'] > 0) {
      foreach ($tmp['response']['docs'] as $rec) {
        if (isset($rec['PID']) && isset($rec['fgs_label_s']) && !$csv) {
          $rec['PID'] = l($rec['PID'], '/islandora/object/' . $rec['PID']);
        }
        $rec['RELS_EXT_isMemberOfSite_uri_ms'] = implode(", ", $rec['RELS_EXT_isMemberOfSite_uri_ms']);
        $rec['fedora_datastreams_ms'] = implode(", ", $rec['fedora_datastreams_ms']);
        $results[] = $rec;
      }
    }
  }
  catch (Exception $e) {
  }

  $download_csv = l(t('Download CSV'), 'upitt_dashboard/report_block/test1/downloadcsv');
  if (!$csv) {
    $content = theme('data_row', array('headings' => $headings, 'rows' => $results, 'download_csv' => $download_csv));
  } else {
    $filename = tempnam('/tmp', 'CSV_');
    $fp = fopen($filename, 'w');
    fputcsv($fp, $headings);
    foreach ($results as $fields) {
      fputcsv($fp, $fields);
    }
    fclose($fp);
    $content = file($filename);
    unset($filename);
  }
  return array($subject, $content);
}

function upitt_dashboard_test2_content($csv = FALSE, $start = 0) {
  $subject = 'WebServices needs to add TN_LARGE';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $q = '(PID:pitt\:*) AND (RELS_EXT_hasModel_uri_s:info\:fedora\/islandora\:bookCModel)';
  $fq = "-fedora_datastream_latest_TN_LARGE_ID_ms:[* TO *]";
  $fl = "PID,fedora_datastreams_ms,isMemberOfSite,fgs_label_s,RELS_EXT_isMemberOfSite_uri_ms";
  $query_processor->solrQuery = $q;
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 1000;
  $query_processor->solrParams = array(
    'fl' => $fl,
    'fq' => $fq,
  );
  $headings = array('PID' => 'PID',
                    'fgs_label_s' => 'Fedora Label',
                    'RELS_EXT_isMemberOfSite_uri_ms' => 'Member of Sites',
                    'fedora_datastreams_ms' => 'Datastreams');
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $results = array();
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    if ($tmp['response']['numFound'] > 0) {
      foreach ($tmp['response']['docs'] as $rec) {
        if (isset($rec['PID']) && isset($rec['fgs_label_s']) && !$csv) {
          $rec['PID'] = l($rec['PID'], '/islandora/object/' . $rec['PID']);
        }
        $rec['RELS_EXT_isMemberOfSite_uri_ms'] = implode(", ", $rec['RELS_EXT_isMemberOfSite_uri_ms']);
        $rec['fedora_datastreams_ms'] = implode(", ", $rec['fedora_datastreams_ms']);
        $results[] = $rec;
      }
    }
  }
  catch (Exception $e) {
  }
  $download_csv = l(t('Download CSV'), 'upitt_dashboard/report_block/test2/downloadcsv');
  if (!$csv) {
    $content = theme('data_row', array('headings' => $headings, 'rows' => $results, 'download_csv' => $download_csv));
  } else {
    $filename = tempnam('/tmp', 'CSV_');
    $fp = fopen($filename, 'w');
    fputcsv($fp, $headings);
    foreach ($results as $fields) {
      fputcsv($fp, $fields);
    }
    fclose($fp);
    $content = file($filename);
    unset($filename);
  }
  return array($subject, $content);
}

function upitt_dashboard_orphanManuscript_content($csv = FALSE, $start = 0) {
  $subject = 'Orphan manuscript ("Book")';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $q = '(PID:pitt\:*) AND -RELS_EXT_isMemberOfCollection_uri_s:["" TO *] AND RELS_EXT_hasModel_uri_s:(*info\:fedora\/islandora\:bookCModel*)';
  $fq = "";
  $fl = "PID,RELS_EXT_hasModel_uri_s,RELS_EXT_isMemberOfSite_uri_ms,fgs_label_s";
  $query_processor->solrQuery = $q;
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 10000;
  $query_processor->solrParams = array(
    'fl' => $fl,
    'fq' => $fq,
  );
  $headings = array('PID' => 'PID',
                    'fgs_label_s' => 'Fedora Label',
                    'RELS_EXT_hasModel_uri_s' => 'hasModel',
                    'RELS_EXT_isMemberOfSite_uri_ms' => 'Member of Sites');
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $results = array();
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    if ($tmp['response']['numFound'] > 0) {
      foreach ($tmp['response']['docs'] as $rec) {
        if (isset($rec['PID']) && isset($rec['fgs_label_s']) && !$csv) {
          $rec['PID'] = l($rec['PID'], '/islandora/object/' . $rec['PID']);
        }
        $rec['RELS_EXT_isMemberOfSite_uri_ms'] = implode(", ", $rec['RELS_EXT_isMemberOfSite_uri_ms']);
        $results[] = $rec;
      }
    }
  }
  catch (Exception $e) {
  }
  $download_csv = l(t('Download CSV'), 'upitt_dashboard/report_block/orphanManuscript/downloadcsv');
  if (!$csv) {
    $content = theme('data_row', array('headings' => $headings, 'rows' => $results, 'download_csv' => $download_csv));
  } else {
    $filename = tempnam('/tmp', 'CSV_');
    $fp = fopen($filename, 'w');
    fputcsv($fp, $headings);
    foreach ($results as $fields) {
      fputcsv($fp, $fields);
    }
    fclose($fp);
    $content = file($filename);
    unset($filename);
  }
  return array($subject, $content);
}


function upitt_dashboard_theme() {
  return array(
    'data_row' => array(
      'template' => 'theme/data-row',
      'variables' => array(
        'headings' => NULL,
        'rows' => NULL,
      ),
    ),
  );
}

function upitt_dashboard_downloadcsv($form_state, $form, $block_delta) {
  // drupal_set_message('Download CSV for '. $block_delta);
  $fn = 'upitt_dashboard_' . $block_delta . '_content';
  @list($subject, $content) = (function_exists($fn)) ? $fn(TRUE) :
    array('Subject not set {' . $block_delta . '}',
          'Content creation function "' . $fn . '{}" does not exist for block "' . $block_delta . '".');

  foreach ($content as $content_line) {
    echo $content_line;
  }
  // tell the browser it's going to be a csv file
  header('Content-Type: application/csv');
  // tell the browser we want to save it instead of displaying it
  $date = date('Y-m-d');
  header('Content-Disposition: attachment; filename="export_' . $date . '_' . $block_delta . '.csv";');
  drupal_exit();
}
